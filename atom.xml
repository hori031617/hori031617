<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[エンジニア日記]]></title>
  <link href="http://engineer-diary.click/atom.xml" rel="self"/>
  <link href="http://engineer-diary.click/"/>
  <updated>2017-11-13T23:05:36+09:00</updated>
  <id>http://engineer-diary.click/</id>
  <author>
    <name><![CDATA[Masahiro Hori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ESLintでJavaScriptのコードスタイルを統一]]></title>
    <link href="http://engineer-diary.click/blog/2017/11/11/setting-eslint/"/>
    <updated>2017-11-11T14:27:29+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/11/11/setting-eslint</id>
    <content type="html"><![CDATA[<h2>ESLintとは？</h2>

<ul>
<li>特定のスタイルガイドライン(検証ルール)に準拠していない、問題のあるパターンやコードを見つけるための静的検証ツール。</li>
<li>検証ルールの追加や、有効or無効化、検出レベル(ワーニング、エラーなど) が自由に設定できる。</li>
</ul>


<h2>ESLintのインストール</h2>

<p>プロジェクトルートに移動し、下記コマンドを実行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install eslint --save-dev
</span><span class='line'>
</span><span class='line'>$ ./node_modules/.bin/eslint -v
</span><span class='line'>v4.9.0</span></code></pre></td></tr></table></div></figure>


<h2>コーディングスタイルのルールを記述するファイル(json形式ならば.eslintrc.json)を下記コマンドで生成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./node_modules/.bin/eslint --init
</span><span class='line'>? How would you like to configure ESLint? (Use arrow keys)
</span><span class='line'>❯ Answer questions about your style  (対話形式で作る)
</span><span class='line'>  Use a popular style guide          (人気のスタイルガイドから作る)
</span><span class='line'>  Inspect your JavaScript file(s)    (JavaScriptファイルから作る)
</span></code></pre></td></tr></table></div></figure>


<h2>コーディングスタイルをチェック</h2>

<p>プロジェクトルートに生成された、.eslintrc.jsonに記述されているルールに従ってチェックしてくれる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./node_modules/.bin/eslint index.js
</span><span class='line'>/index.js
</span><span class='line'>   46:10  error    'hoge' is defined but never used                     no-unused-vars
</span><span class='line'>   83:13  warning  Unexpected console statement                   no-console
</span><span class='line'>   85:37  error    Empty block statement                                    no-empty
</span></code></pre></td></tr></table></div></figure>


<h2>常にコーディングスタイルをチェックするように、IntelliJに設定する</h2>

<p>設定より、</p>

<ol>
<li>Languages &amp; Frameworks</li>
<li>JavaScript</li>
<li>Code Quality Tools</li>
<li>ESLint</li>
<li>Enableにチェック</li>
<li>ESLint package にeslintモジュールのパスを設定</li>
</ol>


<p><img src="http://engineer-diary.click/images/eslint.png" alt="ESLint" /></p>

<h2>コーディングスタイル ルール一覧</h2>

<h3>公式サイト</h3>

<ul>
<li><a href="https://eslint.org/docs/rules/">https://eslint.org/docs/rules/</a></li>
</ul>


<h3>qiita</h3>

<h4>ESLintのエラールール。</h4>

<ul>
<li><a href="https://qiita.com/M-ISO/items/113ddd448bdc496af783">https://qiita.com/M-ISO/items/113ddd448bdc496af783</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react native life cycle]]></title>
    <link href="http://engineer-diary.click/blog/2017/11/04/react-native-life-cycle/"/>
    <updated>2017-11-04T11:07:09+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/11/04/react-native-life-cycle</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Sample React Native App
</span><span class='line'> * https://github.com/facebook/react-native
</span><span class='line'> */
</span><span class='line'>
</span><span class='line'>import React, { Component } from 'react';
</span><span class='line'>import {
</span><span class='line'>    AppRegistry,
</span><span class='line'>} from 'react-native';
</span><span class='line'>
</span><span class='line'>export default class sampleClass extends Component {
</span><span class='line'>
</span><span class='line'>    // コンストラクタ
</span><span class='line'>    constructor(props) {
</span><span class='line'>        super(props);
</span><span class='line'>
</span><span class='line'>        this.state = {
</span><span class='line'>            hoge: null
</span><span class='line'>        };
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // マウント時マウントされるときに1度だけ実行され、
</span><span class='line'>    // 以降は実行されない
</span><span class='line'>    componentWillMount(){
</span><span class='line'>        // render()直前の処理。
</span><span class='line'>        // setStateを行うとrenderは更新されたstateを
</span><span class='line'>        // 参照する。
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // 描画処理
</span><span class='line'>    render() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View&gt;&lt;/View&gt;
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // マウント時マウントされるときに1度だけ実行され、
</span><span class='line'>    // 以降は実行されない
</span><span class='line'>    componentDidMount(){
</span><span class='line'>        // render()直後の処理。
</span><span class='line'>        // setStateを行うとrenderが再実行されるので、
</span><span class='line'>        // 行わない方がいい。
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    // ------------------------------------------
</span><span class='line'>    // 更新時ライフサイクルメソッド ここから
</span><span class='line'>    // ------------------------------------------
</span><span class='line'>
</span><span class='line'>    // 新しいpropsを受け取ると実行
</span><span class='line'>    // 引数に受け取る
</span><span class='line'>    componentWillReceiveProps(nextProps){
</span><span class='line'>        // 更新時ライフサイクルメソッドでsetState()を
</span><span class='line'>        // 実行できるのはここだけ。
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // stateが更新されると実行
</span><span class='line'>    shouldComponentUpdate(nextProps, nextState){
</span><span class='line'>        // パフォーマンス・チューニング時は特に意識する。
</span><span class='line'>        // falseを返すと、以降のcomponentWillUpdate(), render(), componentDidMount()の処理が
</span><span class='line'>        // スキップされる。
</span><span class='line'>
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    componentWillUpdate(nextProps, nextState){
</span><span class='line'>        // 再render()直前の処理。
</span><span class='line'>        // 変更前後のprops、stateを参照し処理を行える。
</span><span class='line'>        // render()処理に移る直前にprops、stateの値が更新される。
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    componentDidUpdate(prevProps, prevState){
</span><span class='line'>        // 再render()直後の処理。
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // ------------------------------------------
</span><span class='line'>    // 更新時ライフサイクルメソッド ここまで
</span><span class='line'>    // ------------------------------------------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    // アンマウント時に実行
</span><span class='line'>    componentWillUnmount(){
</span><span class='line'>        // タイマー停止などの後始末処理を記述する。
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('sampleClass', () =&gt; sampleClass);</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant + PHP + IntelliJ IDEA でリモートデバッグを設定]]></title>
    <link href="http://engineer-diary.click/blog/2017/10/10/intellij-remote-debug/"/>
    <updated>2017-10-10T22:50:48+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/10/10/intellij-remote-debug</id>
    <content type="html"><![CDATA[<h1>Vagrant側の設定</h1>

<h2>サーバーにログイン</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant ssh</span></code></pre></td></tr></table></div></figure>


<h2>peclコマンドをインストール</h2>

<p>(php7の場合、pearのバージョンは1.10.0以降でないと上手く動かない)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum --enablerepo=remi-php70 install php-pear
</span><span class='line'>
</span><span class='line'>pear -V
</span><span class='line'>PEAR Version: 1.10.5
</span><span class='line'>PHP Version: 7.0.11
</span><span class='line'>Zend Engine Version: 3.0.0</span></code></pre></td></tr></table></div></figure>


<h2>xdebug インストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pecl install xdebug</span></code></pre></td></tr></table></div></figure>


<p>You should add &ldquo;zend_extension=/usr/lib64/php/modules/xdebug.so&rdquo; to php.ini<br/>
インストールに成功すると最後に出力される</p>

<h2>php.iniにパラメータを設定</h2>

<p>zend_extension=xdebug.so          ← Apacheの場合はフルパス指定「/usr/lib64/php/modules/xdebug.so」<br/>
xdebug.remote_enable = On<br/>
xdebug.remote_connect_back = On<br/>
xdebug.remote_autostart = On<br/>
xdebug.remote_host = 192.168.33.1  ← echo $_SERVER[&ldquo;REMOTE_ADDR&rdquo;]; の値<br/>
xdebug.remote_port = 9001          ← ローカルPCにて lsof -i :9001 コマンドを使用し、使用されていないポートか確認<br/>
xdebug.idekey=&ldquo;HOGEhoge&rdquo;           ← IDE側の設定で使用する</p>

<h2>環境変数PHP_IDE_CONFIGを設定</h2>

<h3>Apache</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SetEnv PHP_IDE_CONFIG serverName=FUGAfuga</span></code></pre></td></tr></table></div></figure>


<h3>nginx</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fastcgi_param PHP_IDE_CONFIG serverName=FUGAfuga;</span></code></pre></td></tr></table></div></figure>


<h3>cliで実行する場合</h3>

<p>vagrantユーザーの~/.bashrc に設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PHP_IDE_CONFIG="serverName=FUGAfuga"
</span><span class='line'>source .bashrc</span></code></pre></td></tr></table></div></figure>


<h2>サーバー再起動</h2>

<h3>nginx</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service nginx restart
</span><span class='line'>sudo service php-fpm restart</span></code></pre></td></tr></table></div></figure>


<h3>Apache</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service httpd restart</span></code></pre></td></tr></table></div></figure>


<h2>設定を確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php -i | grep xdebug</span></code></pre></td></tr></table></div></figure>


<h1>IDE側の設定</h1>

<h2>接続するリモートホストを設定する</h2>

<ol>
<li>RUN → Edit Configurations を選択</li>
<li>ダイアログ左上にある「+」を押下し、PHP Remote Debugを選択
<img src="http://engineer-diary.click/images/Edit_Configurations.png" alt="Edit Configurations" />
<img src="http://engineer-diary.click/images/php_remote_debug.png" alt="php_remote_debug" /></li>
<li>Serversの「&hellip;」を押下し、Serversダイアログを表示<br/>
<img src="http://engineer-diary.click/images/Servers1.png" alt="Servers1" /></li>
<li>Serversを設定<br/>
Name : PHP_IDE_CONFIG serverName=で指定した値(FUGAfuga)<br/>
Host、Port : vagrant ssh-config コマンドで確認<br/>
Debugger : Xdebug<br/>
Use Path mappings をチェックし、ローカルとリモートホストでシンクしているディレクトリを設定<br/>
<img src="http://engineer-diary.click/images/Servers_%E8%A8%AD%E5%AE%9A.png" alt="Servers_設定" />
Preferences → PHP → Debug よりXdebugのポートを設定<br/>
<img src="http://engineer-diary.click/images/Preference.png" alt="Preference" />
Ide keyを設定(HOGEhoge)<br/>
Name を設定 (わかりやすいサービス名、Vagrant)
<img src="http://engineer-diary.click/images/Servers2.png" alt="Servers2" /></li>
<li>RUN → Break at first line in PHP scripts にチェック<br/>
(デバッグが動作するとき、必ず最初の1行目でブレークポイントが走る)<br/>
<br></li>
<li>RUN → Start Listening for PHP Debug Connections をチェック<br/>
<br>
ブレークポイントをはり、処理の途中でデバッグができるようになりました。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let’s EncryptのSSL証明書を取得し、Apacheに設定する]]></title>
    <link href="http://engineer-diary.click/blog/2017/09/23/apache-ssl/"/>
    <updated>2017-09-23T16:07:14+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/09/23/apache-ssl</id>
    <content type="html"><![CDATA[<h2>certbot-auto のセットアップ</h2>

<p>(「certbot-auto」は Let’s Encrypt が提供しているツール)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># curl https://dl.eff.org/certbot-auto -o /usr/bin/certbot-auto
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100 57175  100 57175    0     0   162k      0 --:--:-- --:--:-- --:--:--  163k
</span><span class='line'>
</span><span class='line'># chmod 700 /usr/bin/certbot-auto
</span><span class='line'>
</span><span class='line'># ls -l /usr/bin/certbot-auto
</span><span class='line'>-rwx------. 1 root root 57175 Sep 23 06:27 /usr/bin/certbot-auto</span></code></pre></td></tr></table></div></figure>


<h2>certbot-auto コマンドを実行し、証明書を作成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># certbot-auto certonly
</span><span class='line'>Saving debug log to /var/log/letsencrypt/letsencrypt.log
</span><span class='line'>
</span><span class='line'>How would you like to authenticate with the ACME CA?
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>1: Apache Web Server plugin - Beta (apache)
</span><span class='line'>2: Spin up a temporary webserver (standalone)
</span><span class='line'>3: Place files in webroot directory (webroot)
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Select the appropriate number [1-3] then [enter] (press 'c' to cancel): 3  # 既存のWEBサーバを使うモードを選択
</span><span class='line'>Plugins selected: Authenticator webroot, Installer None
</span><span class='line'>Please enter in your domain name(s) (comma and/or space separated)  (Enter 'c'
</span><span class='line'>to cancel): 【your-domain.com】  # 取得したドメイン
</span><span class='line'>Obtaining a new certificate
</span><span class='line'>Performing the following challenges:
</span><span class='line'>http-01 challenge for 【your-domain.com】
</span><span class='line'>
</span><span class='line'>Select the webroot for 【your-domain.com】:
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>1: Enter a new webroot
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Press 1 [enter] to confirm the selection (press 'c' to cancel): 1   # 指示に従い1を押下する
</span><span class='line'>Input the webroot for 【your-domain.com】: (Enter 'c' to cancel): 【/var/www/your-document-root】  # ドキュメントルート
</span><span class='line'>Waiting for verification...
</span><span class='line'>Cleaning up challenges
</span><span class='line'>
</span><span class='line'>IMPORTANT NOTES:
</span><span class='line'> - Congratulations! Your certificate and chain have been saved at:
</span><span class='line'>
</span><span class='line'>・・・・・
</span></code></pre></td></tr></table></div></figure>


<p>/etc/letsencrypt/live/【your-domain.com】配下に証明書が自動生成される</p>

<h2>Apacheに設定</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vi /etc/httpd/conf.d/ssl.conf
</span><span class='line'>
</span><span class='line'>以下の項目を設定する。
</span><span class='line'>
</span><span class='line'>SSLCertificateFile /etc/letsencrypt/live/【your-domain.com】/cert.pem
</span><span class='line'>SSLCertificateKeyFile /etc/letsencrypt/live/【your-domain.com】/privkey.pem
</span><span class='line'>SSLCertificateChainFile /etc/letsencrypt/live/【your-domain.com】/chain.pem</span></code></pre></td></tr></table></div></figure>


<p>Apacheを再起動すると、httpsで安全な接続が出来るようになりました</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sequel ProでVagrantのMySQLに接続]]></title>
    <link href="http://engineer-diary.click/blog/2017/09/17/sequelpro-vagrant-mysql/"/>
    <updated>2017-09-17T11:10:05+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/09/17/sequelpro-vagrant-mysql</id>
    <content type="html"><![CDATA[<p>1.接続するホスト情報を<code>vagrant ssh-config</code>で確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd vagrant_project
</span><span class='line'>
</span><span class='line'>vagrant ssh-config
</span><span class='line'>Host hoge
</span><span class='line'>  HostName 127.0.0.1
</span><span class='line'>  User vagrant
</span><span class='line'>  Port 2222
</span><span class='line'>  UserKnownHostsFile /dev/null
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  PasswordAuthentication no
</span><span class='line'>  IdentityFile /Users/hoge/vagrant_project/.vagrant/machines/vh/virtualbox/private_key
</span><span class='line'>  IdentitiesOnly yes
</span><span class='line'>  LogLevel FATAL
</span><span class='line'>  ForwardAgent yes</span></code></pre></td></tr></table></div></figure>


<p>2.Sequel Proの設定画面にてSSHタブを選択し、接続情報を記述</p>

<table>
<thead>
<tr>
<th style="text-align:left;">設定名</th>
<th style="text-align:left;">値</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">MySQLホスト</td>
<td style="text-align:left;">127.0.0.1</td>
</tr>
<tr>
<td style="text-align:left;">ユーザー</td>
<td style="text-align:left;">root</td>
</tr>
<tr>
<td style="text-align:left;">パスワード</td>
<td style="text-align:left;">rootユーザー パスワード</td>
</tr>
<tr>
<td style="text-align:left;">データベーズ</td>
<td style="text-align:left;">接続するデータベース名</td>
</tr>
<tr>
<td style="text-align:left;">SSHホスト</td>
<td style="text-align:left;">127.0.0.1</td>
</tr>
<tr>
<td style="text-align:left;">SSHユーザー</td>
<td style="text-align:left;">vagrant</td>
</tr>
<tr>
<td style="text-align:left;">SSH鍵</td>
<td style="text-align:left;">/Users/hoge/vagrant_project/.vagrant/machines/vh/virtualbox/private_key</td>
</tr>
<tr>
<td style="text-align:left;">SSHポート</td>
<td style="text-align:left;">2222</td>
</tr>
</tbody>
</table>


<p><br></p>

<p><img src="http://engineer-diary.click/images/sequel_setting.png" alt="設定キャプチャ" /></p>

<p>接続できました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3にCSSファイルをアップロードしたら、読み込みエラー]]></title>
    <link href="http://engineer-diary.click/blog/2017/09/03/s3-css-read-error/"/>
    <updated>2017-09-03T10:15:45+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/09/03/s3-css-read-error</id>
    <content type="html"><![CDATA[<p>S3にCSSファイルをアップロードし、上書き更新を行ったら突然下記読み込みエラーに遭遇。<br/>
CSSが読み込まれなくなった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Resource interpreted as Stylesheet but transferred with MIME type binary/octet-stream</span></code></pre></td></tr></table></div></figure>


<p>以下の手順でファイルのヘッダー情報を修正し、対応</p>

<ol>
<li>S3 consoleへ移動</li>
<li>対象のCSSファイルを選択</li>
<li>「さらに」をクリックし、メタデータを選択</li>
<li>Content-Typeのvalueをbinary/octet-streamから「text/css」に変更</li>
</ol>


<p>エラーが解消されました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitでファイルをあるコミット履歴の状態に戻す]]></title>
    <link href="http://engineer-diary.click/blog/2017/08/17/git-checkout-file/"/>
    <updated>2017-08-17T21:25:52+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/08/17/git-checkout-file</id>
    <content type="html"><![CDATA[<p>よく忘れてしまうのでメモ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout コミットハッシュ値 ファイルパス</span></code></pre></td></tr></table></div></figure>


<h3>例</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout abcdefghijklmnopqrstuvwxyz hoge/fuga.txt</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで大文字小文字のファイル名を変更する時]]></title>
    <link href="http://engineer-diary.click/blog/2017/08/13/git-rename-mv/"/>
    <updated>2017-08-13T09:38:15+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/08/13/git-rename-mv</id>
    <content type="html"><![CDATA[<p>単純にリネームしても、<code>git status</code>で変更と認識されない。<br/>
下記コマンドで対応する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git mv Hoge.txt hoge.txt</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[adbコマンドでapkファイルを実機にインストールする]]></title>
    <link href="http://engineer-diary.click/blog/2017/07/17/apk-install/"/>
    <updated>2017-07-17T11:38:23+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/07/17/apk-install</id>
    <content type="html"><![CDATA[<p>例)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb install -r ./android.apk</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Nativeのバージョンを指定してプロジェクトを作成する]]></title>
    <link href="http://engineer-diary.click/blog/2017/06/28/react-native-version/"/>
    <updated>2017-06-28T21:45:41+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/06/28/react-native-version</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native init --version="X.XX.X" myApp</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native Template]]></title>
    <link href="http://engineer-diary.click/blog/2017/06/04/react-native-template/"/>
    <updated>2017-06-04T21:19:29+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/06/04/react-native-template</id>
    <content type="html"><![CDATA[<h2>MyApp.js</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ライブラリ 読み込み処理
</span><span class='line'>import React from 'react';
</span><span class='line'>import {
</span><span class='line'>    StyleSheet,
</span><span class='line'>    Text,
</span><span class='line'>    View
</span><span class='line'>} from 'react-native';
</span><span class='line'>
</span><span class='line'>// 実行されるクラス
</span><span class='line'>export default class MyApp extends React.Component {
</span><span class='line'>
</span><span class='line'>    // コンストラクタ
</span><span class='line'>    constructor(props) {
</span><span class='line'>        super(props);
</span><span class='line'>        this.state = {
</span><span class='line'>            hogehoge: "",
</span><span class='line'>            fugafuga: ""
</span><span class='line'>        };
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // 関数を定義
</span><span class='line'>    doSomething(value) {
</span><span class='line'>        this.setState({hogehoge: value});
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // 表示処理
</span><span class='line'>    render() {
</span><span class='line'>        // navigation のオプジェクト
</span><span class='line'>        const {navigate} = this.props.navigation;
</span><span class='line'>
</span><span class='line'>        // 表示処理
</span><span class='line'>        return (
</span><span class='line'>            &lt;View style={styles.container}&gt;
</span><span class='line'>                &lt;Text&gt;
</span><span class='line'>                    Hello World
</span><span class='line'>                &lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// スタイル定義
</span><span class='line'>const styles = StyleSheet.create({
</span><span class='line'>    container: {
</span><span class='line'>        flex: 1,
</span><span class='line'>        padding: 20
</span><span class='line'>    },
</span><span class='line'>    container2: {
</span><span class='line'>      color: "black",
</span><span class='line'>      backgroundColor: "black",
</span><span class='line'>    }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.ssh/config ファイルにサーバーの接続情報を記述し、管理する]]></title>
    <link href="http://engineer-diary.click/blog/2017/05/28/ssh-config/"/>
    <updated>2017-05-28T20:46:02+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/05/28/ssh-config</id>
    <content type="html"><![CDATA[<p>~/.ssh/config</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host abc_step_server
</span><span class='line'>  HostName XX.XXX.XXX.XXX
</span><span class='line'>  User hogehoge
</span><span class='line'>  Port 12345   # ポートを指定
</span><span class='line'>  IdentityFile ~/.ssh/key/private.key   # 秘密鍵を指定
</span><span class='line'>
</span><span class='line'>Host xyz_web_server
</span><span class='line'>  HostName XX.XXX.XXX.XXX
</span><span class='line'>  User fugafuga
</span><span class='line'>  IdentityFile ~/.ssh/key/private.key
</span><span class='line'>  ProxyCommand ssh -W %h:%p abc_step_server   # abc_step_serverを経由</span></code></pre></td></tr></table></div></figure>


<p>これで、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh abc_step_server
</span><span class='line'>ssh xyz_web_server</span></code></pre></td></tr></table></div></figure>


<p>と打てば、各サーバーにログインできる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lineスタンプを作ってみた]]></title>
    <link href="http://engineer-diary.click/blog/2017/05/15/line-stamp/"/>
    <updated>2017-05-15T20:19:54+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/05/15/line-stamp</id>
    <content type="html"><![CDATA[<ol>
<li><p>Androidアプリ「スケッチ」で絵を書く
<a href="https://play.google.com/store/apps/details?id=com.sonymobile.sketch&amp;hl=ja">https://play.google.com/store/apps/details?id=com.sonymobile.sketch&amp;hl=ja</a></p></li>
<li><p>MACアプリ「GIMP」で画像の余白削除、背景画像透過、リサイズ処理
<a href="https://matome.naver.jp/odai/2141144615158584001">https://matome.naver.jp/odai/2141144615158584001</a></p>

<blockquote><p>＜手順＞
GIMPで画像を開くと、大抵の場合以下のような形で無駄に余白があったりする。
そのため、無駄な余白の削除、画像サイズの変更、背景透明化、PNG形式への変換を行う。
上記、操作方法を参考。</p></blockquote></li>
<li><p>ファイル名を変更<br/>
スタンプ画像   ：01.png～40.png（01から40までの連番）<br/>
メイン画像１枚 ：main.png<br/>
タブ画像１枚   ：tab.png</p></li>
</ol>


<p>以上、スタンプの素材が完成。<br/>
あとはLINE Creators Marketより申請。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtualbox Guest Additions 5.1.20 でマウントエラー]]></title>
    <link href="http://engineer-diary.click/blog/2017/05/03/virtualbox-guest-additions-5-dot-1-20/"/>
    <updated>2017-05-03T20:44:04+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/05/03/virtualbox-guest-additions-5-dot-1-20</id>
    <content type="html"><![CDATA[<h2>下記エラーが出力されるようになった</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrant was unable to mount VirtualBox shared folders. This is usually
</span><span class='line'>because the filesystem "vboxsf" is not available. This filesystem is
</span><span class='line'>made available via the VirtualBox Guest Additions and kernel module.
</span><span class='line'>Please verify that these guest additions are properly installed in the
</span><span class='line'>guest. This is not a bug in Vagrant and is usually caused by a faulty
</span><span class='line'>Vagrant box. For context, the command attempted was:</span></code></pre></td></tr></table></div></figure>


<h2>やったこと</h2>

<h3>カーネルのアップデート</h3>

<p>下記コマンドでカーネルをアップデート</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant ssh
</span><span class='line'>sudo yum update kernel*
</span><span class='line'>
</span><span class='line'>vagrant reload</span></code></pre></td></tr></table></div></figure>


<h3>シンボリックリンクの張り替え</h3>

<p>Virtualbox Guest Additions 5.1.20にはバグがあるとのこと
<a href="https://www.virtualbox.org/ticket/16670">https://www.virtualbox.org/ticket/16670</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant ssh
</span><span class='line'>ls -lh /sbin/mount.vboxsf
</span><span class='line'>sudo ln -sf /opt/VBoxGuestAdditions-5.1.20/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf
</span><span class='line'>
</span><span class='line'>vagrant reload</span></code></pre></td></tr></table></div></figure>


<p>解決しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ターミナルでfind、xargs、grepコマンドを使用し対象ディレクトリ内のファイル一覧から文字列を検索する]]></title>
    <link href="http://engineer-diary.click/blog/2017/05/01/find-grep-xargs/"/>
    <updated>2017-05-01T18:51:40+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/05/01/find-grep-xargs</id>
    <content type="html"><![CDATA[<h2>構文</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find 【検索ディレクトリ】 -type f | xargs grep 【検索文字列】</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.htaccess Permission denied エラー]]></title>
    <link href="http://engineer-diary.click/blog/2017/04/03/htaccess-permission-denied/"/>
    <updated>2017-04-03T21:45:47+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/04/03/htaccess-permission-denied</id>
    <content type="html"><![CDATA[<p>VagrantでCentOS7をインストールし、Apacheをいれてページを表示させようとすると下記エラーがApacheのエラーログに出力され、ページが表示できない問題に遭遇</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Mon Apr 03 08:46:41.995046 2017] [core:crit] [pid 28125] (13)Permission denied: [client 10.0.2.2:65506] AH00529: /var/www/html/.htaccess pcfg_openfile: unable to check htaccess file, ensure it is readable and that '/var/www/html/' is executable</span></code></pre></td></tr></table></div></figure>


<h2>やったこと</h2>

<h3>SELinuxを無効にしたところページが表示された</h3>

<h4>SELinuxの設定状況を確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># getenforce
</span><span class='line'>Enforcing</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th style="text-align:left;">設定値</th>
<th style="text-align:left;">意味</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">enforcing</td>
<td style="text-align:left;">SELinux機能、アクセス制御が有効</td>
</tr>
<tr>
<td style="text-align:left;">permissive</td>
<td style="text-align:left;">SELinuxは警告を出力するが、アクセス制限は無効</td>
</tr>
<tr>
<td style="text-align:left;">disabled</td>
<td style="text-align:left;">SELinux機能、アクセス制御が無効</td>
</tr>
</tbody>
</table>


<p><br></p>

<h4>SElinuxを無効にする</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># setenforce 0</span></code></pre></td></tr></table></div></figure>


<h4>SElinuxの設定ファイルを編集し、再起動時を行った際にもSELinuxを無効にする</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vi /etc/selinux/config
</span><span class='line'>SELINUX=disabled</span></code></pre></td></tr></table></div></figure>


<h3>SELinuxとは？</h3>

<p>セキュリティ管理をしてくれるモジュール。<br/>
今回はローカル環境なので無効としても問題なしと判断。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クリックしたらJavascriptでフォームを作成し、POST送信する]]></title>
    <link href="http://engineer-diary.click/blog/2017/03/20/js-form-post-send/"/>
    <updated>2017-03-20T15:01:37+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/03/20/js-form-post-send</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;
</span><span class='line'>  function post_form(post_url){
</span><span class='line'>      var form = document.createElement('form');
</span><span class='line'>      document.body.appendChild(form);
</span><span class='line'>
</span><span class='line'>      var hoge_value = document.createElement('input');
</span><span class='line'>      hoge_value.setAttribute('type', 'hidden' );
</span><span class='line'>      hoge_value.setAttribute('name', 'hoge' );
</span><span class='line'>      hoge_value.setAttribute('value' , 123);
</span><span class='line'>      form.appendChild(hoge_value);
</span><span class='line'>
</span><span class='line'>      var fuga_value = document.createElement('input');
</span><span class='line'>      fuga_value.setAttribute('type', 'hidden' );
</span><span class='line'>      fuga_value.setAttribute('name', 'fuga' );
</span><span class='line'>      fuga_value.setAttribute('value' , 'abcde');
</span><span class='line'>      form.appendChild(fuga_value);
</span><span class='line'>
</span><span class='line'>      form.setAttribute('method', 'post');
</span><span class='line'>      form.setAttribute('action', post_url);
</span><span class='line'>      form.submit();
</span><span class='line'>  }
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;a href="javascript:void();" onclick="post_form('http://example.com/test'); return false;"&gt;送信&lt;/a&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curlコマンドでアクセストークンを付与し、APIをPOST送信する]]></title>
    <link href="http://engineer-diary.click/blog/2017/03/15/curl-post/"/>
    <updated>2017-03-15T20:38:37+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/03/15/curl-post</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -H "Cache-Control: no-cache" -H "Authorization: OAuth [AccessToken]" -d 'hoge=12345&fuga=abcde' "https://example.com/api/v1/sample"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macでツールを使わずzipコマンドでディレクトリを圧縮し、解凍パスワードを付与する]]></title>
    <link href="http://engineer-diary.click/blog/2017/03/07/mac-zip-cmd/"/>
    <updated>2017-03-07T20:30:10+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/03/07/mac-zip-cmd</id>
    <content type="html"><![CDATA[<h2>書式</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zip -e -r 【出力zipファイル名】.zip 【圧縮するディレクトリ】</span></code></pre></td></tr></table></div></figure>


<h2>実行例</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zip -e -r HOGE.zip HOGE
</span><span class='line'>Enter password:        ← 解凍パスワード入力
</span><span class='line'>Verify password:       ← 解凍パスワード確認
</span><span class='line'>  adding: HOGE/ (stored 0%)
</span><span class='line'>  adding: HOGE/fuga.pdf (deflated 5%)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel5で論理削除を実装する手順]]></title>
    <link href="http://engineer-diary.click/blog/2017/03/05/laravel5-deleted-at/"/>
    <updated>2017-03-05T18:57:44+09:00</updated>
    <id>http://engineer-diary.click/blog/2017/03/05/laravel5-deleted-at</id>
    <content type="html"><![CDATA[<h2>1. Migrateファイルを作成時、以下のカラムを記述</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$table-&gt;softDeletes();  // deleted_atカラムが追加される</span></code></pre></td></tr></table></div></figure>


<h2>2. Modelに以下を追加</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use Illuminate\Database\Eloquent\SoftDeletes; // 追加する
</span><span class='line'>
</span><span class='line'>class Hoge extends Model
</span><span class='line'>{
</span><span class='line'>    // 論理削除を有効化
</span><span class='line'>    use SoftDeletes;
</span><span class='line'>    protected $dates = ['deleted_at'];</span></code></pre></td></tr></table></div></figure>


<p>上記1.2の設定で論理削除が有効になる。<br/>
deleted_atに日付が登録されていれば、<br/>
<strong>SELECT文にWHERE句などを記述しなくても、取得されない。</strong></p>

<h2>3. Eloquentでdeleted_at に値を登録</h2>

<h3>通常のdelete文から変更なし</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$fuga = Fuga::findOrFail($id);
</span><span class='line'>$fuga-&gt;delete(); // deleted_at = now()が入って、delete文でカラムは削除されない。</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
