<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[エンジニア日記]]></title>
  <link href="http://engineer-diary.click/atom.xml" rel="self"/>
  <link href="http://engineer-diary.click/"/>
  <updated>2016-12-06T22:36:52+09:00</updated>
  <id>http://engineer-diary.click/</id>
  <author>
    <name><![CDATA[Masahiro Hori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQLで文字コードを指定しデータベース作成]]></title>
    <link href="http://engineer-diary.click/blog/2016/12/06/mysql-create-database/"/>
    <updated>2016-12-06T22:30:53+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/12/06/mysql-create-database</id>
    <content type="html"><![CDATA[<h2>文字コード utf8で作成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE DATABASE 【データベース名】 DEFAULT CHARACTER SET utf8;</span></code></pre></td></tr></table></div></figure>


<h2>文字コード utf8mb4で作成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE DATABASE 【データベース名】 DEFAULT CHARACTER SET utf8mb4;</span></code></pre></td></tr></table></div></figure>


<h3>utf8mb4とは</h3>

<ul>
<li>文字コードの一種で、UTF8で4バイト文字を扱う事が出来るもの</li>
<li>絵文字や中国漢字、日本語でも特殊漢字などは4バイトが含まれている</li>
<li>MySQLでは5.5からこのutf8mb4に対応している</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLでアカウント作成とパスワード変更]]></title>
    <link href="http://engineer-diary.click/blog/2016/12/04/mysql-create-account/"/>
    <updated>2016-12-04T16:44:57+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/12/04/mysql-create-account</id>
    <content type="html"><![CDATA[<h3>アカウント作成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE USER 'アカウント名'@'localhost' IDENTIFIED BY 'パスワード';</span></code></pre></td></tr></table></div></figure>


<h3>パスワード変更</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SET PASSWORD FOR 'アカウント名'@'localhost' = PASSWORD('新パスワード');</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudWatch Events cronのタイムゾーン]]></title>
    <link href="http://engineer-diary.click/blog/2016/11/12/cloudwatch-events/"/>
    <updated>2016-11-12T19:35:25+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/11/12/cloudwatch-events</id>
    <content type="html"><![CDATA[<p>AWS Lambda で関数を作成し、その関数をCloudWatch Eventsで定期的に実行しようとして、cronを設定したが時間どおりに動作しなかった。</p>

<p>CloudWatch Eventsのトラブルシューティングページを確認すると</p>

<blockquote><p>ScheduleExpressions は UTC です。UTC タイムゾーンで自己トリガーするルールのスケジュールが設定されていることを確認します。</p></blockquote>

<p>とあり、タイムゾーンをUTCで設定する必要があった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ローカルホストとリモートホストをマウント時にエラー]]></title>
    <link href="http://engineer-diary.click/blog/2016/11/03/vagrant-shared-folder-error/"/>
    <updated>2016-11-03T17:29:16+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/11/03/vagrant-shared-folder-error</id>
    <content type="html"><![CDATA[<h2>下記エラーが出力された</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrant was unable to mount VirtualBox shared folders. This is usually
</span><span class='line'>because the filesystem "vboxsf" is not available.</span></code></pre></td></tr></table></div></figure>


<h2>解決方法</h2>

<h3>まず、vagrant up時に自動的に新しいバージョンのGuest Additionsに更新してくれる「vagrant-vbguest」というプラグインをインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant plugin install vagrant-vbguest</span></code></pre></td></tr></table></div></figure>


<h3>Vagrantが起動している状態でマウント失敗している仮想マシンの状態確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant vbguest --status
</span><span class='line'>
</span><span class='line'>[default] No installation found.</span></code></pre></td></tr></table></div></figure>


<h3>Guest Additionsを更新</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant vbguest</span></code></pre></td></tr></table></div></figure>


<h3>再度仮想マシンの状態確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant vbguest --status
</span><span class='line'>
</span><span class='line'>[default] GuestAdditions 5.1.8 running --- OK.</span></code></pre></td></tr></table></div></figure>


<h3>仮想マシンを再起動</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant reload</span></code></pre></td></tr></table></div></figure>


<p>解決しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant box add で transfer closed]]></title>
    <link href="http://engineer-diary.click/blog/2016/11/02/vagrant-box-add-error/"/>
    <updated>2016-11-02T20:37:22+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/11/02/vagrant-box-add-error</id>
    <content type="html"><![CDATA[<h2>下記コマンドでboxを追加</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add {name} {url}
</span><span class='line'>
</span><span class='line'>vagrant box add centos/7 https://atlas.hashicorp.com/centos/boxes/7</span></code></pre></td></tr></table></div></figure>


<h2>エラーが発生</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>An error occurred while downloading the remote file. The error
</span><span class='line'>message, if any, is reproduced below. Please fix this error and try
</span><span class='line'>again.
</span><span class='line'>
</span><span class='line'>transfer closed with 386379308 bytes remaining to read</span></code></pre></td></tr></table></div></figure>


<h2>解決方法</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.vagrant.d/tmp/
</span><span class='line'>rm *
</span><span class='line'>
</span><span class='line'>再度 vagrant box add 〜 を実行</span></code></pre></td></tr></table></div></figure>


<p>無事にboxを追加できました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[よく使用するartisanコマンド]]></title>
    <link href="http://engineer-diary.click/blog/2016/10/17/laravel-artisan-command/"/>
    <updated>2016-10-17T19:11:46+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/10/17/laravel-artisan-command</id>
    <content type="html"><![CDATA[<h3>コントローラーの雛形を作成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan make:controller HogeController</span></code></pre></td></tr></table></div></figure>


<h3>モデルの雛形を作成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan make:model Fuga</span></code></pre></td></tr></table></div></figure>


<h3>バッチクラスとコマンドを作成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan make:console PiyoCommand --command="piyo_cmd"</span></code></pre></td></tr></table></div></figure>


<h3>バッチコマンドを実行</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/Console/Kernel.php に
</span><span class='line'>
</span><span class='line'>protected $commands = [
</span><span class='line'>    'App\Console\Commands\InspireCommand',
</span><span class='line'>    'App\Console\Commands\PiyoCommand' // 追加
</span><span class='line'>];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>php artisan piyo_cmd</span></code></pre></td></tr></table></div></figure>


<h3>テーブルを作成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan make:migration create_hoge_table --create=hoge</span></code></pre></td></tr></table></div></figure>


<h3>カラムを追加</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan make:migration add_piyo_fuga_table --table=fuga</span></code></pre></td></tr></table></div></figure>


<h3>マイグレーションを実行</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan migrate</span></code></pre></td></tr></table></div></figure>


<h3>実行したマイグレーションをロールバック</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan migrate:rollback</span></code></pre></td></tr></table></div></figure>


<h3>コマンド一覧確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php artisan list</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidアプリにRealmを使用するため、インストールを行う]]></title>
    <link href="http://engineer-diary.click/blog/2016/09/25/android-realm/"/>
    <updated>2016-09-25T16:36:26+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/09/25/android-realm</id>
    <content type="html"><![CDATA[<h1>Realmとは？</h1>

<p>NoSQL データベースの1つ<br/>
その他に「MongoDB」「Redis」などがある<br/>
モバイル向けのデータベース</p>

<h1>Android Studioからインストールする</h1>

<p>gradleというjavaのパッケージ管理システムを使用する</p>

<h2>インストール手順</h2>

<ul>
<li><a href="https://realm.io/" title="公式サイト">公式サイト</a>より「Java」をクリック</li>
<li>「Getting Started」セクションに記述されている内容を行う

<ul>
<li>Android Studioの左カラム「Gradle Scripts」より ProjectレベルとApplicationレベルのbuild.gradleファイルにRealmをインストールするパスを記述</li>
</ul>
</li>
<li>ツールバーより「Sync Project with Gradle File」を押下</li>
</ul>


<p>エラーがなければイベントログに「Gradle build finished」となる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Meetup Tokyo Vol.8に行ってきました 2/2]]></title>
    <link href="http://engineer-diary.click/blog/2016/09/15/laravel-5-3/"/>
    <updated>2016-09-15T06:32:32+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/09/15/laravel-5-3</id>
    <content type="html"><![CDATA[<p>2つ目のセッションの内容はLaravel5.3に搭載された新機能のうち、<br/>
2つを紹介してくれました。</p>

<h1>1. Simple Pagination</h1>

<p>Blade側で指定できるようになり、Paginationに使用する関数を読んであげるだけで良くなった。<br/>
※ 今までは自分でカスタマイズする必要があった.</p>

<h2>Paginnation で使うメソッド</h2>

<ul>
<li>hasPages (ページがあるか？)</li>
<li>onfirstPage (最初のページ)</li>
<li>previousPageUrl (前のページ)</li>
<li>nextPageUrl (次のページ)</li>
<li>hasMorePages (次のページがあるか?)</li>
</ul>


<h1>2. Notification</h1>

<p>通知を行う処理が楽に実装できるようになった。  <br/>
※ 今まではEventを作って自分で実装する必要があった.<br/>
イベント通知の処理は</p>

<ul>
<li>ユーザーが登録された</li>
<li>お問い合わせがあった</li>
</ul>


<p>など</p>

<h2>標準で用意されている通知方法</h2>

<ul>
<li>Mail</li>
<li>Databaase</li>
<li>SMS</li>
<li>Slack</li>
</ul>


<p>セッション資料<br/>
<a href="https://speakerdeck.com/localdisk/about-laravel-5-dot-3">https://speakerdeck.com/localdisk/about-laravel-5-dot-3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Meetup Tokyo Vol.8に行ってきました 1/2]]></title>
    <link href="http://engineer-diary.click/blog/2016/09/12/laravel-meetup-tokyo-vol8/"/>
    <updated>2016-09-12T22:49:10+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/09/12/laravel-meetup-tokyo-vol8</id>
    <content type="html"><![CDATA[<p>本日、「Laravel Meetup Tokyo Vol.8」に行ってきました。<br/>
セッションは2つあり、それぞれ内容を2回に分けて簡単にまとめます。<br/>
以下は１つ目のセッションです。<br/>
モジュール、DBのバックアップの大切さ、やり方についてのセッションでした。</p>

<p><br></p>

<h2>Backing up with Laravel</h2>

<p>ある日、いきなりサーバーが壊れた時にバックアップを同じサーバーに置いていると、<br/>
バックアップファイルにアクセスできずに痛い目を見る。<br/>
バックアップの方法は色々ある。</p>

<ul>
<li>bash script

<ul>
<li>自分で実装</li>
</ul>
</li>
<li>Ottomatik.io

<ul>
<li>Backups as a Service</li>
<li>有償</li>
</ul>
</li>
<li>BackupPC

<ul>
<li>無償</li>
<li>設定がやや難しい</li>
</ul>
</li>
</ul>


<h3>Laravelを使うならオススメのプラグイン</h3>

<h4>Laravel Backup</h4>

<p>特徴</p>

<ul>
<li>PHPモジュール(ファイル)、DBのダンプファイルをzipに圧縮して他サーバーやS3に保存できる</li>
<li>バックアップファイルが古いものを削除することができる(Cleanup old backups)</li>
<li>バックアップ失敗、バックアップファイルが随分古い、容量が大きいなどの時に通知を送ることができる(Send Notification)</li>
<li>インストールや設定が簡単</li>
</ul>


<p>ドキュメント<br/>
<a href="https://docs.spatie.be/laravel-backup/v3/introduction">https://docs.spatie.be/laravel-backup/v3/introduction</a></p>

<p>セッション資料<br/>
<a href="https://speakerdeck.com/freekmurze/backing-up-with-laravel-tokyo">https://speakerdeck.com/freekmurze/backing-up-with-laravel-tokyo</a></p>

<p><br></p>

<h2>その他</h2>

<p>その他紹介があったプラグイン</p>

<ul>
<li>Laravel Permission

<ul>
<li>ユーザーに権限や許可を簡単に付与することができる</li>
</ul>
</li>
<li>Laravel Analytics

<ul>
<li>Google Analyticsの情報を取得できる</li>
</ul>
</li>
<li>Laravel Responsecache

<ul>
<li>同じリクエストをキャッシュし、レスポンスを早くする</li>
</ul>
</li>
<li>Laravel Medialibrary

<ul>
<li>画像ファイルなどの情報取得にEloquent Modelの記述形式で情報を取得できるようになる</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLの文字コードを確認]]></title>
    <link href="http://engineer-diary.click/blog/2016/08/17/mysql-char/"/>
    <updated>2016-08-17T22:36:13+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/08/17/mysql-char</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show variables like "chara%";
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>+--------------------------+----------------------------+
</span><span class='line'>| Variable_name | Value |
</span><span class='line'>+--------------------------+----------------------------+
</span><span class='line'>| character_set_client | utf8 |
</span><span class='line'>| character_set_connection | utf8 |
</span><span class='line'>| character_set_database | utf8 |
</span><span class='line'>| character_set_filesystem | binary |
</span><span class='line'>| character_set_results | utf8 |
</span><span class='line'>| character_set_server | utf8 |
</span><span class='line'>| character_set_system | utf8 |
</span><span class='line'>| character_sets_dir | /usr/share/mysql/charsets/ |
</span><span class='line'>+--------------------------+----------------------------+</span></code></pre></td></tr></table></div></figure>


<p><br></p>

<table>
<thead>
<tr>
<th style="text-align:center;">変数名</th>
<th style="text-align:center;">意味</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">character_set_client</td>
<td style="text-align:center;">クライアント側で発行したsql文はこの文字コードになる</td>
</tr>
<tr>
<td style="text-align:center;">character_set_connection</td>
<td style="text-align:center;">クライアントから受け取った文字をこの文字コードへ変換する</td>
</tr>
<tr>
<td style="text-align:center;">character_set_database</td>
<td style="text-align:center;">現在参照しているDBの文字コード</td>
</tr>
<tr>
<td style="text-align:center;">character_set_results</td>
<td style="text-align:center;">クライアントへ送信する検索結果はこの文字コードになる</td>
</tr>
<tr>
<td style="text-align:center;">character_set_server</td>
<td style="text-align:center;">DB作成時のデフォルトの文字コード</td>
</tr>
<tr>
<td style="text-align:center;">character_set_system</td>
<td style="text-align:center;">システムの使用する文字セットで常にutf8が使用されている</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascriptでselectボックスの値を取得する]]></title>
    <link href="http://engineer-diary.click/blog/2016/08/16/javascript-select-value/"/>
    <updated>2016-08-16T20:21:02+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/08/16/javascript-select-value</id>
    <content type="html"><![CDATA[<p>よく忘れるのでメモ。</p>

<h3>取得方法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>document.フォーム名.セレクト名.value</span></code></pre></td></tr></table></div></figure>


<h3>例)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;form name="frm"&gt;
</span><span class='line'>  &lt;select name="hoge"&gt;
</span><span class='line'>    &lt;option value="a"&gt;A&lt;/option&gt;
</span><span class='line'>    &lt;option value="b"&gt;B&lt;/option&gt;
</span><span class='line'>    &lt;option value="c"&gt;C&lt;/option&gt;
</span><span class='line'>  &lt;/select&gt;
</span><span class='line'>&lt;/form&gt;
</span><span class='line'>
</span><span class='line'>document.frm.hoge.value</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLでユーザーにDB、テーブルに対して権限付与するコマンド]]></title>
    <link href="http://engineer-diary.click/blog/2016/07/13/mysql-authority/"/>
    <updated>2016-07-13T22:51:12+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/07/13/mysql-authority</id>
    <content type="html"><![CDATA[<h3>MySQL DBに移動</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>USE mysql</span></code></pre></td></tr></table></div></figure>


<h3>登録されているユーザーを確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT user, host FROM user;</span></code></pre></td></tr></table></div></figure>


<h3>ユーザーに付与されている権限を確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SHOW GRANTS FOR 'ユーザ名'@'ホスト名';</span></code></pre></td></tr></table></div></figure>


<h3>すべての操作権限を指定テーブルに付与</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GRANT ALL PRIVILEGES ON `DB名`.テーブル TO 'ユーザ名'@'ホスト名';</span></code></pre></td></tr></table></div></figure>


<h3>すべての操作権限を対象DBのすべてのテーブルに付与</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GRANT ALL PRIVILEGES ON `DB名`.* TO 'ユーザー名'@'ホスト名';</span></code></pre></td></tr></table></div></figure>


<h3>SELECT、UPDATE、INSERT、DELETE権限指定テーブルに付与</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GRANT SELECT,UPDATE,INSERT,DELETE ON `DB名`.テーブル TO 'ユーザ名'@'ホスト名';</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カレントディレクトリ配下のファイルの拡張子を変更する]]></title>
    <link href="http://engineer-diary.click/blog/2016/06/30/ext-change/"/>
    <updated>2016-06-30T21:13:04+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/06/30/ext-change</id>
    <content type="html"><![CDATA[<p>ttlファイルをtxtファイルにするために拡張子の変更をコマンドで行う。<br/>
だが、以下の方法ではダメだった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv *.ttl *.txt</span></code></pre></td></tr></table></div></figure>


<p><br>
一括でファイルを変更するにはfor文で行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for fname in *.ttl; do
</span><span class='line'>mv $fname ${fname%.ttl}.txt;
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カレントディレクトリにあるファイルの文字列を一度に置換する]]></title>
    <link href="http://engineer-diary.click/blog/2016/06/29/replace-string/"/>
    <updated>2016-06-29T19:56:42+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/06/29/replace-string</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find ./ -type f | xargs sed -i 's/置き換え前/置き換え後/g'</span></code></pre></td></tr></table></div></figure>


<p><strong>※ 注意 ※</strong><br/>
<strong>このコマンドはファイルのバックアップは作成されないので、実行前にバックアップは取っておいたほうがいいです。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[macにlaravel5をインストールする]]></title>
    <link href="http://engineer-diary.click/blog/2016/06/11/laravel-install/"/>
    <updated>2016-06-11T15:07:14+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/06/11/laravel-install</id>
    <content type="html"><![CDATA[<h3>まずcomposerコマンドをインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sS https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<h3>composerコマンドをパスが通ってる場所に移動</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv composer.phar /usr/local/bin/composer</span></code></pre></td></tr></table></div></figure>


<h3>移動したことを確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>which composer
</span><span class='line'>  /usr/local/bin/composer
</span><span class='line'>
</span><span class='line'>composer --version
</span><span class='line'>  Composer version 1.1.2 </span></code></pre></td></tr></table></div></figure>


<h3>Laravelの最新バージョンのインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer create-project laravel/laravel プロジェクト名 --prefer-dist</span></code></pre></td></tr></table></div></figure>


<h2>その他</h2>

<h3>Laravel5の動作条件</h3>

<p>【Laravel 5.0】<br/>
PHP >= 5.4<br/>
Mcrypt PHP Extension<br/>
OpenSSL PHP Extension<br/>
Mbstring PHP Extension<br/>
Tokenizer PHP Extension</p>

<p>【Laravel 5.1】<br/>
PHP >= 5.5.9<br/>
OpenSSL PHP Extension<br/>
Mbstring PHP Extension<br/>
Tokenizer PHP Extension</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[エクセルの列、行に関するショートカットキーまとめ(Windows)]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/25/excel-win/"/>
    <updated>2016-05-25T23:07:50+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/25/excel-win</id>
    <content type="html"><![CDATA[<h3>選択範囲を行全体に広げる</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shift + space</span></code></pre></td></tr></table></div></figure>


<h3>選択範囲を列全体に広げる</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + space</span></code></pre></td></tr></table></div></figure>


<h3>行や列を挿入するショートカットキー</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + shift +「+」</span></code></pre></td></tr></table></div></figure>


<h3>行を1行削除する</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + 「-」</span></code></pre></td></tr></table></div></figure>


<h3>行を1行非表示にする</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + 9</span></code></pre></td></tr></table></div></figure>


<h3>行を再表示させる</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + shift + 9</span></code></pre></td></tr></table></div></figure>


<h3>列を1列非表示にする</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + 0</span></code></pre></td></tr></table></div></figure>


<h3>列を再表示させる</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + shift + 0</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git reset と git revertの違い]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/23/git-reset-revert/"/>
    <updated>2016-05-23T23:40:01+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/23/git-reset-revert</id>
    <content type="html"><![CDATA[<p>どちらもコミットしたものを取り消すコマンドだが、取り消され方や、取り消されるコミットの範囲の違いをまとめる。</p>

<h2>git reset &ndash;haed コミットID</h2>

<p>指定したコミットIDから以降のコミットをなかったことにする。<br/>
コミットログからも抹消される。<br/>
例)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit abcdefghijklmnopqrstuvwxyz0123456789
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Sun May 22 23:53:54 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット3
</span><span class='line'>
</span><span class='line'>commit 0123456789abcdefghijklmnopqrstuvwxyz
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Sun May 22 23:53:20 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット2
</span><span class='line'>
</span><span class='line'>commit abcdefghijklm0123456789nopqrstuvwxyz
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Tue May 17 00:40:38 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --haed 0123456789abcdefghijklmnopqrstuvwxyz
</span><span class='line'>                 (コミット2のコミットIDを渡す)</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit abcdefghijklm0123456789nopqrstuvwxyz
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Tue May 17 00:40:38 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット1</span></code></pre></td></tr></table></div></figure>


<p>となり、指定したコミットID以降のコミットが取り消され、コミットログもなくなる。<br/>
※取り消前の状態をpushしていれば、コミット取り消後はpushができなくなる。</p>

<h2>git revert コミットID</h2>

<p>指定したコミットIDのコミットのみ変更を取り消す。<br/>
取り消したこともコミットログとして残る。<br/>
例)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit abcdefghijklmnopqrstuvwxyz0123456789
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Sun May 22 23:53:54 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット3
</span><span class='line'>
</span><span class='line'>commit 0123456789abcdefghijklmnopqrstuvwxyz
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Sun May 22 23:53:20 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット2
</span><span class='line'>
</span><span class='line'>commit abcdefghijklm0123456789nopqrstuvwxyz
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Tue May 17 00:40:38 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット1</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git revert 0123456789abcdefghijklmnopqrstuvwxyz
</span><span class='line'>           (コミット2のコミットIDを渡す)</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Sat Jun 11 12:36:33 2016 +0900
</span><span class='line'>
</span><span class='line'>    Revert "コミット2"
</span><span class='line'>    
</span><span class='line'>    This reverts commit 0123456789abcdefghijklmnopqrstuvwxyz.
</span><span class='line'>
</span><span class='line'>commit abcdefghijklmnopqrstuvwxyz0123456789
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Sun May 22 23:53:54 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット3
</span><span class='line'>
</span><span class='line'>commit 0123456789abcdefghijklmnopqrstuvwxyz
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Sun May 22 23:53:20 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット2
</span><span class='line'>
</span><span class='line'>commit abcdefghijklm0123456789nopqrstuvwxyz
</span><span class='line'>Author: Masahiro Hori &lt;mail_address&gt;
</span><span class='line'>Date:   Tue May 17 00:40:38 2016 +0900
</span><span class='line'>
</span><span class='line'>    コミット1</span></code></pre></td></tr></table></div></figure>


<p>となり、コミット2のみのコミット内容が取り消され、コミットログに取り消しログが残る。<br/>
※取り消前の状態をpushしていても、コミット取り消後もpushはできる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smartyで出来る便利だと思ったこと]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/21/php-smarty/"/>
    <updated>2016-05-21T21:13:33+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/21/php-smarty</id>
    <content type="html"><![CDATA[<h3>GETパラメータを取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.get.パラメータ名}</span></code></pre></td></tr></table></div></figure>


<h3>POSTパラメータを取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.post.パラメータ名}</span></code></pre></td></tr></table></div></figure>


<h3>クッキーを取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.cookie.クッキー名}</span></code></pre></td></tr></table></div></figure>


<h3>セッション変数を取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.session.セッション変数名}</span></code></pre></td></tr></table></div></figure>


<h3>PHPの定数にアクセス</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.const.定数名}</span></code></pre></td></tr></table></div></figure>


<h3>現在時間を取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.now}</span></code></pre></td></tr></table></div></figure>


<h3>出力文字をスケープ</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$hoge|escape}</span></code></pre></td></tr></table></div></figure>


<h3>タイムスタンプで日付を比較</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{if $hoge|strtotime &gt;= $fuga|strtotime}
</span><span class='line'>  piyo
</span><span class='line'>{/if}</span></code></pre></td></tr></table></div></figure>


<h3>日付のフォーマットを整える</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{* YYYY/mm/dd *}
</span><span class='line'>{$date|date_format|"%Y/%m/%d"}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでtwitterに投稿するプログラムを作成]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/17/go-twitter-post/"/>
    <updated>2016-05-17T00:43:30+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/17/go-twitter-post</id>
    <content type="html"><![CDATA[<p>Goでブログを更新したらブログのタイトルを入力して、定型文を投稿してくれるプログラムを作ってみた。</p>

<ul>
<li>anacondaというtwitter投稿モジュールを使用</li>
<li>twitterのアクセストークンなどの情報は外部ファイルに定義</li>
<li>投稿する定型文も外部ファイルとして読み込む</li>
<li>コマンドを叩きタイトルを入力する</li>
<li>投稿する内容を表示し、実行可否を聞く</li>
<li>回答に合わせて処理を行う</li>
</ul>


<h3>anacondaをダウンロード</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get github.com/ChimeraCoder/anaconda</span></code></pre></td></tr></table></div></figure>


<h3>ソース</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>    "encoding/json"
</span><span class='line'>    "fmt"
</span><span class='line'>    "io/ioutil"
</span><span class='line'>    "github.com/ChimeraCoder/anaconda"
</span><span class='line'>    "os"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>type Config struct {
</span><span class='line'>    ConsumerKey string `json:"consumer_key"`
</span><span class='line'>    ConsumerSecret string `json:"consumer_secret"`
</span><span class='line'>    AccessToken string `json:"access_token"`
</span><span class='line'>    AccessTokenSecret string `json:"access_token_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main(){
</span><span class='line'>
</span><span class='line'>    // ブログのtitleを受け取る
</span><span class='line'>    var title string
</span><span class='line'>    fmt.Print("title: ")
</span><span class='line'>    fmt.Scan(&title)
</span><span class='line'>
</span><span class='line'>    // 投稿のフォーマットファイルを読み込み、タイトルを反映して内容の確認
</span><span class='line'>    root_path := "/hoge/fuga/"
</span><span class='line'>    buff_contents, err := ioutil.ReadFile(root_path+"twitter_post/post_contents.txt")
</span><span class='line'>    if err != nil {
</span><span class='line'>        fmt.Println(err)
</span><span class='line'>        os.Exit(-1)
</span><span class='line'>    }
</span><span class='line'>    contents := string(buff_contents)
</span><span class='line'>    contents = fmt.Sprintf(contents, title)
</span><span class='line'>    fmt.Print("\n"+contents+"\n")
</span><span class='line'>
</span><span class='line'>    // twitterに投稿するか判断
</span><span class='line'>    fmt.Println("twitterに投稿しますか? (Y/n)")
</span><span class='line'>    var answer string
</span><span class='line'>    fmt.Scan(&answer)
</span><span class='line'>    if answer != "Y" {
</span><span class='line'>        fmt.Println("投稿せずに処理を終了します。")
</span><span class='line'>        os.Exit(1)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // twitterのaccess_tokenなどを設定ファイルから取得
</span><span class='line'>    file, err := ioutil.ReadFile(root_path+"twitter_post/config.json")
</span><span class='line'>    if err != nil {
</span><span class='line'>        fmt.Println(err)
</span><span class='line'>        os.Exit(-2)
</span><span class='line'>    }
</span><span class='line'>    var config Config
</span><span class='line'>    json.Unmarshal(file, &config)
</span><span class='line'>
</span><span class='line'>    // twitter投稿
</span><span class='line'>    anaconda.SetConsumerKey(config.ConsumerKey)
</span><span class='line'>    anaconda.SetConsumerSecret(config.ConsumerSecret)
</span><span class='line'>    api := anaconda.NewTwitterApi(config.AccessToken, config.AccessTokenSecret)
</span><span class='line'>    _, twitter_err := api.PostTweet(contents, nil)
</span><span class='line'>    if twitter_err != nil {
</span><span class='line'>        fmt.Println(twitter_err)
</span><span class='line'>        os.Exit(-3)
</span><span class='line'>    }
</span><span class='line'>    fmt.Println("Twitterに投稿しました。")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>少しはまったこと</h3>

<p>_, err := api.PostTweet(contents, nil)<br/>
と実装したところ下記コンパイルエラーとなった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>twitter_post/twitter_post.go:58: no new variables on left side of :=</span></code></pre></td></tr></table></div></figure>


<p>原因は同じ変数名の宣言は同じブロックでは1度しかできないためのエラーだった。<br/>
<br>
でも、<br/>
file, err := ioutil.ReadFile(root_path+&ldquo;twitter_post/config.json&rdquo;)<br/>
この処理の時点でerrを宣言するのは2回目なのでこのときにエラーが起こらないのはなぜだろうと思っていたところ、</p>

<blockquote><p>省略形式の時は宣言する変数のうち少なくともひとつがブランク変数(_)ではない、
新しい変数であれば、他は再宣言ではなく単なる代入として扱えます。</p></blockquote>

<p>とのことでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoでJSONファイルを読み込み内容を構造体に詰め込むときにはまったのでメモ]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/16/go-jsonfile-read/"/>
    <updated>2016-05-16T23:38:58+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/16/go-jsonfile-read</id>
    <content type="html"><![CDATA[<h3>jsonファイル</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat config.json 
</span><span class='line'>{
</span><span class='line'>    "consumer_key":"hogehogehoge"
</span><span class='line'>  , "consumer_secret":"fugafugafuga"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>ソースコード</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>// モジュール読み込み
</span><span class='line'>import(
</span><span class='line'>    "encoding/json"
</span><span class='line'>    "fmt"
</span><span class='line'>    "io/ioutil"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>// 構造体を宣言
</span><span class='line'>type Config struct{
</span><span class='line'>    consumer_key string `json:"consumer_key"`
</span><span class='line'>    consumer_secret string `json:"consumer_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main(){
</span><span class='line'>
</span><span class='line'>    // jsonファイルを読み込み
</span><span class='line'>    file, err := ioutil.ReadFile(config.json)
</span><span class='line'>    if err != nil {
</span><span class='line'>        panic(err)
</span><span class='line'>    }
</span><span class='line'>    var config Config
</span><span class='line'>    json.Unmarshal(file, &config)
</span><span class='line'>
</span><span class='line'>    // jsonファイルの中身を表示
</span><span class='line'>    fmt.Println(config.consumer_key)
</span><span class='line'>    fmt.Println(config.consumer_secret)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>結果</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./json 
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>表示されない。。。</p>

<h3>構造体の変数を変更してみる</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Config struct{
</span><span class='line'>    ConsumerKey string `json:"consumer_key"`
</span><span class='line'>    ConsumerSecret string `json:"consumer_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>fmt.Println(config.ConsumerKey)
</span><span class='line'>fmt.Println(config.ConsumerSecret)
</span><span class='line'>
</span><span class='line'>// 表示された
</span><span class='line'>./json 
</span><span class='line'>hogehogehoge
</span><span class='line'>fugafugafuga</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Config struct{
</span><span class='line'>    consumerKey string `json:"consumer_key"`
</span><span class='line'>    consumerSecret string `json:"consumer_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>fmt.Println(config.consumerKey)
</span><span class='line'>fmt.Println(config.consumerSecret)
</span><span class='line'>
</span><span class='line'>// 表示されない。。
</span><span class='line'>./json 
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>う〜ん、 <br/>
構造体の変数の先頭は大文字じゃないといけないのかな・・・？</p>
]]></content>
  </entry>
  
</feed>
