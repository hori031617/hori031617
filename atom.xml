<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[エンジニア日記]]></title>
  <link href="http://engineer-diary.click/atom.xml" rel="self"/>
  <link href="http://engineer-diary.click/"/>
  <updated>2016-05-22T23:52:18+09:00</updated>
  <id>http://engineer-diary.click/</id>
  <author>
    <name><![CDATA[Masahiro Hori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Smartyで出来る便利だと思ったこと]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/21/php-smarty/"/>
    <updated>2016-05-21T21:13:33+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/21/php-smarty</id>
    <content type="html"><![CDATA[<h3>GETパラメータを取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.get.パラメータ名}</span></code></pre></td></tr></table></div></figure>


<h3>POSTパラメータを取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.post.パラメータ名}</span></code></pre></td></tr></table></div></figure>


<h3>クッキーを取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.cookie.クッキー名}</span></code></pre></td></tr></table></div></figure>


<h3>セッション変数を取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.session.セッション変数名}</span></code></pre></td></tr></table></div></figure>


<h3>PHPの定数にアクセス</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.const.定数名}</span></code></pre></td></tr></table></div></figure>


<h3>現在時間を取得</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$smarty.now}</span></code></pre></td></tr></table></div></figure>


<h3>出力文字をスケープ</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{$hoge|escape}</span></code></pre></td></tr></table></div></figure>


<h3>タイムスタンプで日付を比較</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{if $hoge|strtotime &gt;= $fuga|strtotime}
</span><span class='line'>  piyo
</span><span class='line'>{/if}</span></code></pre></td></tr></table></div></figure>


<h3>日付のフォーマットを整える</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{* YYYY/mm/dd *}
</span><span class='line'>{$date|date_format|"%Y/%m/%d"}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでtwitterに投稿するプログラムを作成]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/17/go-twitter-post/"/>
    <updated>2016-05-17T00:43:30+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/17/go-twitter-post</id>
    <content type="html"><![CDATA[<p>Goでブログを更新したらブログのタイトルを入力して、定型文を投稿してくれるプログラムを作ってみた。</p>

<ul>
<li>anacondaというtwitter投稿モジュールを使用</li>
<li>twitterのアクセストークンなどの情報は外部ファイルに定義</li>
<li>投稿する定型文も外部ファイルとして読み込む</li>
<li>コマンドを叩きタイトルを入力する</li>
<li>投稿する内容を表示し、実行可否を聞く</li>
<li>回答に合わせて処理を行う</li>
</ul>


<h3>anacondaをダウンロード</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get github.com/ChimeraCoder/anaconda</span></code></pre></td></tr></table></div></figure>


<h3>ソース</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>    "encoding/json"
</span><span class='line'>    "fmt"
</span><span class='line'>    "io/ioutil"
</span><span class='line'>    "github.com/ChimeraCoder/anaconda"
</span><span class='line'>    "os"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>type Config struct {
</span><span class='line'>    ConsumerKey string `json:"consumer_key"`
</span><span class='line'>    ConsumerSecret string `json:"consumer_secret"`
</span><span class='line'>    AccessToken string `json:"access_token"`
</span><span class='line'>    AccessTokenSecret string `json:"access_token_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main(){
</span><span class='line'>
</span><span class='line'>    // ブログのtitleを受け取る
</span><span class='line'>    var title string
</span><span class='line'>    fmt.Print("title: ")
</span><span class='line'>    fmt.Scan(&title)
</span><span class='line'>
</span><span class='line'>    // 投稿のフォーマットファイルを読み込み、タイトルを反映して内容の確認
</span><span class='line'>    root_path := "/hoge/fuga/"
</span><span class='line'>    buff_contents, err := ioutil.ReadFile(root_path+"twitter_post/post_contents.txt")
</span><span class='line'>    if err != nil {
</span><span class='line'>        fmt.Println(err)
</span><span class='line'>        os.Exit(-1)
</span><span class='line'>    }
</span><span class='line'>    contents := string(buff_contents)
</span><span class='line'>    contents = fmt.Sprintf(contents, title)
</span><span class='line'>    fmt.Print("\n"+contents+"\n")
</span><span class='line'>
</span><span class='line'>    // twitterに投稿するか判断
</span><span class='line'>    fmt.Println("twitterに投稿しますか? (Y/n)")
</span><span class='line'>    var answer string
</span><span class='line'>    fmt.Scan(&answer)
</span><span class='line'>    if answer != "Y" {
</span><span class='line'>        fmt.Println("投稿せずに処理を終了します。")
</span><span class='line'>        os.Exit(1)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // twitterのaccess_tokenなどを設定ファイルから取得
</span><span class='line'>    file, err := ioutil.ReadFile(root_path+"twitter_post/config.json")
</span><span class='line'>    if err != nil {
</span><span class='line'>        fmt.Println(err)
</span><span class='line'>        os.Exit(-2)
</span><span class='line'>    }
</span><span class='line'>    var config Config
</span><span class='line'>    json.Unmarshal(file, &config)
</span><span class='line'>
</span><span class='line'>    // twitter投稿
</span><span class='line'>    anaconda.SetConsumerKey(config.ConsumerKey)
</span><span class='line'>    anaconda.SetConsumerSecret(config.ConsumerSecret)
</span><span class='line'>    api := anaconda.NewTwitterApi(config.AccessToken, config.AccessTokenSecret)
</span><span class='line'>    _, twitter_err := api.PostTweet(contents, nil)
</span><span class='line'>    if twitter_err != nil {
</span><span class='line'>        fmt.Println(twitter_err)
</span><span class='line'>        os.Exit(-3)
</span><span class='line'>    }
</span><span class='line'>    fmt.Println("Twitterに投稿しました。")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>少しはまったこと</h3>

<p>_, err := api.PostTweet(contents, nil)<br/>
と実装したところ下記コンパイルエラーとなった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>twitter_post/twitter_post.go:58: no new variables on left side of :=</span></code></pre></td></tr></table></div></figure>


<p>原因は同じ変数名の宣言は同じブロックでは1度しかできないためのエラーだった。<br/>
<br>
でも、<br/>
file, err := ioutil.ReadFile(root_path+&ldquo;twitter_post/config.json&rdquo;)<br/>
この処理の時点でerrを宣言するのは2回目なのでこのときにエラーが起こらないのはなぜだろうと思っていたところ、</p>

<blockquote><p>省略形式の時は宣言する変数のうち少なくともひとつがブランク変数(_)ではない、
新しい変数であれば、他は再宣言ではなく単なる代入として扱えます。</p></blockquote>

<p>とのことでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoでJSONファイルを読み込み内容を構造体に詰め込むときにはまったのでメモ]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/16/go-jsonfile-read/"/>
    <updated>2016-05-16T23:38:58+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/16/go-jsonfile-read</id>
    <content type="html"><![CDATA[<h3>jsonファイル</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat config.json 
</span><span class='line'>{
</span><span class='line'>    "consumer_key":"hogehogehoge"
</span><span class='line'>  , "consumer_secret":"fugafugafuga"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>ソースコード</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>// モジュール読み込み
</span><span class='line'>import(
</span><span class='line'>    "encoding/json"
</span><span class='line'>    "fmt"
</span><span class='line'>    "io/ioutil"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>// 構造体を宣言
</span><span class='line'>type Config struct{
</span><span class='line'>    consumer_key string `json:"consumer_key"`
</span><span class='line'>    consumer_secret string `json:"consumer_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main(){
</span><span class='line'>
</span><span class='line'>    // jsonファイルを読み込み
</span><span class='line'>    file, err := ioutil.ReadFile(config.json)
</span><span class='line'>    if err != nil {
</span><span class='line'>        panic(err)
</span><span class='line'>    }
</span><span class='line'>    var config Config
</span><span class='line'>    json.Unmarshal(file, &config)
</span><span class='line'>
</span><span class='line'>    // jsonファイルの中身を表示
</span><span class='line'>    fmt.Println(config.consumer_key)
</span><span class='line'>    fmt.Println(config.consumer_secret)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>結果</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./json 
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>表示されない。。。</p>

<h3>構造体の変数を変更してみる</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Config struct{
</span><span class='line'>    ConsumerKey string `json:"consumer_key"`
</span><span class='line'>    ConsumerSecret string `json:"consumer_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>fmt.Println(config.ConsumerKey)
</span><span class='line'>fmt.Println(config.ConsumerSecret)
</span><span class='line'>
</span><span class='line'>// 表示された
</span><span class='line'>./json 
</span><span class='line'>hogehogehoge
</span><span class='line'>fugafugafuga</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Config struct{
</span><span class='line'>    consumerKey string `json:"consumer_key"`
</span><span class='line'>    consumerSecret string `json:"consumer_secret"`
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>fmt.Println(config.consumerKey)
</span><span class='line'>fmt.Println(config.consumerSecret)
</span><span class='line'>
</span><span class='line'>// 表示されない。。
</span><span class='line'>./json 
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>う〜ん、 <br/>
構造体の変数の先頭は大文字じゃないといけないのかな・・・？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにGoをインストールしHello Worldをやってみた]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/15/go-lang-hello-world/"/>
    <updated>2016-05-15T00:02:34+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/15/go-lang-hello-world</id>
    <content type="html"><![CDATA[<h3>Goのインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew install go</span></code></pre></td></tr></table></div></figure>


<h3>Goの開発ディレクトリ元となる GOPATH 環境変数を設定</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export GOPATH=$HOME/github/go
</span><span class='line'>export PATH=$PATH:$GOPATH/bin
</span><span class='line'>echo 'export GOPATH=$HOME/github/go' &gt;&gt; ~/.bash_profile
</span><span class='line'>echo 'export PATH=$PATH:$GOPATH/bin' &gt;&gt; ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<h3>開発元ディレクトリに移動し、src/{プロジェクト名}ディレクトリを作成</h3>

<p>Goではsrcディレクトリの下にどんどんプロジェクトを作成していくイメージ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ${GOPATH}
</span><span class='line'>mkdir -p src/helloworld/</span></code></pre></td></tr></table></div></figure>


<h3>Hello Worldを出力するモジュールを作成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi src/helloworld/helloworld.go
</span><span class='line'>
</span><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>    "fmt"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>func main(){
</span><span class='line'>    fmt.Println("Hello, World!")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>プロジェクト名を指定し、コンパイル</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ${GOPATH}/src
</span><span class='line'>go install helloworld/</span></code></pre></td></tr></table></div></figure>


<h3>コンパイルが成功すると、srcディレクトリと同じ階層にbinディレクトリが作成され、その中にバイナリファイルが作成される</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ${GOPATH}
</span><span class='line'>tree
</span><span class='line'>.
</span><span class='line'>├── bin
</span><span class='line'>│   └── helloworld
</span><span class='line'>└── src
</span><span class='line'>    └── helloworld
</span><span class='line'>    └── helloworld.go</span></code></pre></td></tr></table></div></figure>


<h3>実行</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ${GOPATH}/bin
</span><span class='line'>./helloworld
</span><span class='line'>
</span><span class='line'>Hello, World!</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQLでのAUTO_INCREMENTのしくみ]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/14/postgresql-sequence/"/>
    <updated>2016-05-14T12:56:15+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/14/postgresql-sequence</id>
    <content type="html"><![CDATA[<p>PostgreSQLでのPrimaryKeyはシーケンス番号で管理されている。<br/>
MySQLだと特に気にしなくてもいいのだがPostgreSQLで特に何も気にしてなかったときにエラーとなった事象。</p>

<h3>テーブル定義</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> hoge_id | integer | not null default nextval('mst_hoge_hoge_id_seq'::regclass)</span></code></pre></td></tr></table></div></figure>


<h3>hoge_idの登録状況</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select  hoge_id from mst_hoge order by  hoge_id desc limit 2;
</span><span class='line'>  hoge_id
</span><span class='line'>---------------------
</span><span class='line'>                 110
</span><span class='line'>                 109</span></code></pre></td></tr></table></div></figure>


<p> hoge_id を nextval で取得しアプリケーションからINSERTを行ったところあるときに突然下記エラーとなった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postgres: ERROR: duplicate key value violates unique constraint "mst_hoge_pkey" </span></code></pre></td></tr></table></div></figure>


<h3>原因</h3>

<p>テストデータで直接INSET文を実行したときにmst_hoge_ hoge_id_seqの値を同様に更新する考慮が漏れていた。<br/>
結果、nextvalで取得できる値がテストデータ投入前時のhoge_idが返却され、一意制約エラーとなった。</p>

<h3>対応</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT setval('mst=hoge_id_seq', 最後の数値);  -- これで値が書きかわる 
</span><span class='line'>
</span><span class='line'>select last_value from mst_hoge_ hoge_id_seq;  -- 確認
</span><span class='line'> last_value
</span><span class='line'>------------
</span><span class='line'>        110</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでAPIを作成し、画面が表示されるときに非同期で２つ以上のAPIを呼ぶ]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/12/session-write-close/"/>
    <updated>2016-05-12T07:24:11+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/12/session-write-close</id>
    <content type="html"><![CDATA[<p>表題の実装を行った。<br/>
APIを1つだけしか呼ばない場合だと問題は表面化しなかったのだが、<br/>
２つ以上を呼び出すと先に呼び出したAPIの処理が終わってから次のAPIが実行されるという<br/>
処理動作になっていた。<br/>
そのため、画面表示に少し時間がかかる。</p>

<h3>原因</h3>

<p>APIでは <strong>session_start()</strong> 処理が記述されていた。<br/>
session_start() 処理が走るとセッションに排他ロックがかかるため<br/>
次のAPIが書き込み待ちになり実行が遅れるというものだった。</p>

<h3>対応策</h3>

<p>セッションへの書き込みが完了したら（セッションに対する処理が終われば）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>session_write_close()</span></code></pre></td></tr></table></div></figure>


<p>
を呼び出し、排他ロックを解除する。</p>

<h3>参考URL</h3>

<p><a href="http://unsolublesugar.com/20121103/113321/">http://unsolublesugar.com/20121103/113321/</a>
<a href="http://www.objective-php.net/blog/detail/20110813">http://www.objective-php.net/blog/detail/20110813</a>
<a href="http://blog2.elephantech.net/php/%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%97%E3%81%A6%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%B5%82%E4%BA%86%E3%81%99/">http://blog2.elephantech.net/php/%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%97%E3%81%A6%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%B5%82%E4%BA%86%E3%81%99/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages、Octopressで独自ドメイン設定]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/10/github-pages-octopress-original-domain/"/>
    <updated>2016-05-10T21:37:07+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/10/github-pages-octopress-original-domain</id>
    <content type="html"><![CDATA[<p>GitHub PagesとOctopressを利用し、独自ドメインを設定するときにはまったのでメモ。<br/>
独自ドメイン取得の流れと設定方法は下記</p>

<ol>
<li>お名前.comで独自ドメイン取得</li>
<li>取得したドメインにAレコードを2つ追加し、それぞれGithubのDNSサーバーのIPアドレス(2016/05/10 時点で 192.30.252.153、192.30.252.154)を設定</li>
<li>source/CNAME ファイルに取得した独自ドメインを記述</li>
</ol>


<p>と、ここまでは<strong>「GitHub Pages 独自ドメイン 設定」</strong>等でググれば、結構出てくるので問題はなかった。<br/>
だが、いざ取得した独自ドメインでアクセスすると、CSSやJSのパスが上手く独自ドメイン反映後に対応していなく、CSSの読み込みエラーでページが崩れた。</p>

<h3>何が起きたのか?</h3>

<p>Github PagesのトップページのURLは <a href="http://username.github.io/repository-name">http://username.github.io/repository-name</a> となる。<br/>
(リポジトリごとのWebページとして作成)<br/>
そのため、CSSなどの読み込みパスは /repository-name/hoge.css となる。</p>

<p>独自ドメイン設定後は <a href="http://original-domain">http://original-domain</a> となるためCSSの読み込みパスは /hoge.css としたいのだが、<br/>
HTMLの読み込みパスは変わらず (当たり前か笑)、/repository-name/hoge.css のままとなり、読み込みエラーとなった。</p>

<h3>解決方法</h3>

<p>_config.yml を修正</p>

<ul>
<li>修正前</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># If publishing to a subdirectory as in http://site.com/project set 'root: /project'  
</span><span class='line'>root: /repository-name</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修正後</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># If publishing to a subdirectory as in http://site.com/project set 'root: /project'  
</span><span class='line'>root: /</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular JS で、APIを非同期でPOST呼び出しし、実行結果をアラート表示する]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/06/angular-js-post-ajax/"/>
    <updated>2016-05-06T10:58:19+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/06/angular-js-post-ajax</id>
    <content type="html"><![CDATA[<ul>
<li>APIはPHPで作成</li>
<li>ユーザーのパスワードをリセットするAPI</li>
<li>リセットボタンを押下して呼び出される</li>
<li>APIは実行結果をJSONデータで返却する</li>
<li>JSONデータの戻り値を見て、成功、失敗を判断する</li>
<li>失敗時にはエラーメッセージを表示する</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;
</span><span class='line'>&lt;html lang="ja"&gt;
</span><span class='line'>
</span><span class='line'>&lt;body ng-app="user_edit" ng-controller="UserController" ng-cloak&gt;
</span><span class='line'>&lt;button ng-click="reset()"&gt;リセットボタン&lt;/button&gt;
</span><span class='line'>
</span><span class='line'>&lt;!-- Anguler JS 読み込み ここから --&gt;
</span><span class='line'>  &lt;script src="angular.js"&gt;&lt;/script&gt;
</span><span class='line'>  &lt;script src="angular-resource.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;!-- Anguler JS 読み込み ここまで --&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>    var UserController = function($scope, $resource){
</span><span class='line'>
</span><span class='line'>    // リセットボタン
</span><span class='line'>    $scope.reset = function(){
</span><span class='line'>
</span><span class='line'>        var reset_password_api = $resource(" APIパス");
</span><span class='line'>        var parameter = {user_id: 'hoge'};
</span><span class='line'>
</span><span class='line'>        // POST送信
</span><span class='line'>        reset_password_api.save(parameter, function(ret){
</span><span class='line'>
</span><span class='line'>            if(ret['result'] == 'NG'){
</span><span class='line'>                alert(ret['message']);
</span><span class='line'>            } else {
</span><span class='line'>                alert('成功');
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>    }
</span><span class='line'>    var appModule = angular.module('user_edit', ['ngResource']);
</span><span class='line'>    appModule.controller('UserController', UserController);
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h3>補足</h3>

<p>PHPでAPIを作成した場合、POSTパラメータを受け取るには下記処理が必要</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>// ポストパラメータ受け取り
</span><span class='line'>$post_data = json_decode(fgets(fopen('php://input','r')), true);
</span><span class='line'>$user_id   = (!empty($post_data['user_id'])) ? $post_data['user_id'] : null;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular JS で、APIを非同期でGET呼び出しし、返却されたデータを表示する]]></title>
    <link href="http://engineer-diary.click/blog/2016/05/05/angular-js-get-ajax/"/>
    <updated>2016-05-05T08:14:21+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/05/05/angular-js-get-ajax</id>
    <content type="html"><![CDATA[<ul>
<li>APIはJSONデータを返却する</li>
<li>JSONデータにはあるグループのグループ名、コメント、登録日が格納されている</li>
<li>返却されたJSONデータを <em>ng-repeat(ループ)</em> で表示する</li>
</ul>


<pre><code>&lt;!doctype html&gt;
  &lt;html lang="ja"&gt;
    &lt;body ng-app="group" ng-cloak&gt;
      &lt;div ng-controller="GroupController"&gt;
        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th&gt;グループ名&lt;/th&gt;
              &lt;th&gt;コメント&lt;/th&gt;
              &lt;th&gt;登録日&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr ng-repeat="group in data.group_list"&gt;
              &lt;td&gt;{group.group_name}&lt;/td&gt;
              &lt;td&gt;{group.comment}&lt;/td&gt;
              &lt;td&gt;{group.regist_date}&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/div&gt;
   &lt;!-- Anguler JS 読み込み ここから --&gt;
      &lt;script src="angular.js"&gt;&lt;/script&gt;
      &lt;script src="angular-resource.js"&gt;&lt;/script&gt;
   &lt;!-- Anguler JS 読み込み ここまで --&gt;
      &lt;script&gt;
        var GroupController = function($scope, $resource){

        // GETパラーメータ
        var parameter = {hoge: 'fuga'};

        var group_api = $resource(" APIパス ");

        // 非同期でGET通信
        group_api.get(parameter, function(data){
            $scope.data = data;
        });

        var appModule = angular.module('group', ['ngResource']);
        appModule.controller('GroupController', GroupController);
      &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftのUIColectionViewでセルを均等に配置し、セルとセルの間に罫線を表示する]]></title>
    <link href="http://engineer-diary.click/blog/2016/04/30/swift-uicollectionview/"/>
    <updated>2016-04-30T22:33:33+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/04/30/swift-uicollectionview</id>
    <content type="html"><![CDATA[<h3>やり方</h3>

<p>罫線は背景色を表示する方法をとる。<br/>
(この例の場合は黒)<br/>
よって、セルとセルの間に均等にスペースが空くように配置する</p>

<h3>イメージ</h3>

<p><img src="http://engineer-diary.click/images/UICollectionViewCapture.png" alt="キャプチャ" /></p>

<h3>ソースコード</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ViewController: UIViewController,UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
</span><span class='line'>
</span><span class='line'>    let linePoint: CGFloat = 1     // 罫線の太さ
</span><span class='line'>    let numberOfCols: CGFloat = 6  // 1行に表示するセルの数
</span><span class='line'>
</span><span class='line'>    // セルのレイアウト調整
</span><span class='line'>    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -&gt; CGSize {
</span><span class='line'>        // セルのサイズ = (端末の横幅 - (罫線の太さ*(1行に表示するセルの個数-1=外の線を引いた内側の線の数))) / 1行に表示するセルの個数
</span><span class='line'>        let size = floor((collectionView.frame.size.width - (linePoint*(numberOfCols-1))) / numberOfCols)
</span><span class='line'>        return CGSizeMake(size, size)
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAtIndex section: Int) -&gt; UIEdgeInsets {
</span><span class='line'>        return UIEdgeInsetsMake(0.0, 0.0, 0.0, 0.0)
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAtIndex section: Int) -&gt; CGFloat {
</span><span class='line'>        return linePoint
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    ......
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ApacheのアクセスログからURLごと、時間帯別でURLごとにアクセスを集計する]]></title>
    <link href="http://engineer-diary.click/blog/2016/04/28/apache-access-log-search/"/>
    <updated>2016-04-28T00:30:01+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/04/28/apache-access-log-search</id>
    <content type="html"><![CDATA[<h3>パラメータを除外し、URLごとに集計</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat access.log | awk -F\" '{print $2}' | awk -F' ' '{print $2}' | cut -f1 -d? | sort | uniq -c | sort -n -r &gt; output.txt</span></code></pre></td></tr></table></div></figure>


<h3>時間帯のURLごとに集計</h3>

<p>例) 2016/04/27/ 18:00 台の時間帯にアクセスのあったURLごとの集計</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat access.log | grep '\[27/Apr/2016:18:00:' | awk -F\" '{print $2}' | awk -F' ' '{print $2}' | cut -f1 -d? | sort | uniq -c | sort -n -r &gt; output_1800.txt</span></code></pre></td></tr></table></div></figure>


<h3>その他</h3>

<p>複数あるアクセスログファイルを1つにまとめる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat access1.log access2.log access3.log &gt; total_access.log</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://engineer-diary.click/blog/2016/04/24/hello-world/"/>
    <updated>2016-04-24T19:12:54+09:00</updated>
    <id>http://engineer-diary.click/blog/2016/04/24/hello-world</id>
    <content type="html"><![CDATA[<h2>My First Blog</h2>

<p>初めての投稿です。<br/>
仕事はWEBエンジニアをやっています。<br/>
趣味でiPhoneアプリ作成もやっています。<br/>
この前、無事に公開されました^^<br/>
これから、日々の開発中にうまくいったこと、うまくいかなかったことなどをまとめる技術ブログとして、どんどん更新していこうと思います。</p>

<p>よろしくお願いします。</p>
]]></content>
  </entry>
  
</feed>
